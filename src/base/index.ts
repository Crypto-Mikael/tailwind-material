import {
	CorePaletteColors,
	Scheme,
	CorePalette,
	rgbaFromArgb
} from '@material/material-color-utilities';

export type MaterialCSSVariables =
	| 'primary'
	| 'on-primary'
	| 'primary-container'
	| 'on-primary-container'
	| 'secondary'
	| 'on-secondary'
	| 'secondary-container'
	| 'on-secondary-container'
	| 'tertiary'
	| 'on-tertiary'
	| 'tertiary-container'
	| 'on-tertiary-container'
	| 'error'
	| 'on-error'
	| 'error-container'
	| 'on-error-container'
	| 'background'
	| 'on-background'
	| 'surface'
	| 'on-surface'
	| 'surface-variant'
	| 'on-surface-variant'
	| 'outline'
	| 'outline-variant'
	| 'shadow'
	| 'scrim'
	| 'inverse-surface'
	| 'inverse-on-surface'
	| 'inverse-primary'
	| 'surface-container-lowest'
	| 'surface-container-low'
	| 'surface-container'
	| 'surface-container-high'
	| 'surface-container-highest';

export type MaterialCssVariablesOnDOM = {
	[T in `--md-sys-color-${MaterialCSSVariables}`]: `${number} ${number} ${number}`;
};

/**
 * @param scheme Scheme in CamelCase generated by the libray
 * @returns
 * Object that has all variables of material tokens in a format
 * that css can read.
 *
 * @see
 * Check in the end of **{@link https://github.com/material-foundation/material-tokens README}**
 * all **variable.css** produced in this function.
 */
function setSchemeProperties(json: Scheme['props'], suffix = '') {
	const setScheme = {};
	for (const [key, value] of Object.entries(json)) {
		const token = key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
		const color = objectRGBAToRGBA(rgbaFromArgb(value as number));
		setScheme[`--md-sys-color-${token}${suffix}`] = color;
	}
	return setScheme as MaterialCssVariablesOnDOM;
}

/**
 * @returns
 * Material tokens as object in light mode using
 * {@link https://github.com/material-foundation/material-color-utilities @material/material-color-utilities}
 * libray.
 * @see
 * Check all **variable.css** produced in this function in this
 * **{@link https://github.com/material-foundation/material-tokens/blob/main/css/theme/light.css light.css}**
 * file.
 */
const darkSchemeProperties = (colorPalette: CorePaletteColors) => {
	const materialPalette = CorePalette.fromColors(colorPalette);
	const cssVariables = setSchemeProperties(Scheme.darkFromCorePalette(materialPalette).toJSON());
	// for some reason the library does not generate the surface container colors
	return {
		...cssVariables,
		'--md-sys-color-surface-container-lowest': objectRGBAToRGBA(
			rgbaFromArgb(materialPalette.n1.tone(4))
		),
		'--md-sys-color-surface-container-low': objectRGBAToRGBA(
			rgbaFromArgb(materialPalette.n1.tone(10))
		),
		'--md-sys-color-surface-container': objectRGBAToRGBA(rgbaFromArgb(materialPalette.n1.tone(12))),
		'--md-sys-color-surface-container-high': objectRGBAToRGBA(
			rgbaFromArgb(materialPalette.n1.tone(17))
		),
		'--md-sys-color-surface-container-highest ': objectRGBAToRGBA(
			rgbaFromArgb(materialPalette.n1.tone(22))
		)
	} as MaterialCssVariablesOnDOM;
};

/**
 * @returns
 * Material tokens as object in dark mode using
 * {@link https://github.com/material-foundation/material-color-utilities @material/material-color-utilities}
 * libray.
 *
 * @see
 * Check all **variable.css** produced in this function in this
 * **{@link https://github.com/material-foundation/material-tokens/blob/main/css/theme/dark.css dark.css}**
 * file.
 */
const lightSchemeProperties = (colorPalette: CorePaletteColors) => {
	const materialPalette = CorePalette.contentFromColors(colorPalette);
	const cssVariables = setSchemeProperties(Scheme.lightFromCorePalette(materialPalette).toJSON());
	// for some reason the library does not generate the surface container colors
	return {
		...cssVariables,
		'--md-sys-color-surface-container-lowest': objectRGBAToRGBA(
			rgbaFromArgb(materialPalette.n1.tone(100))
		),
		'--md-sys-color-surface-container-low': objectRGBAToRGBA(
			rgbaFromArgb(materialPalette.n1.tone(96))
		),
		'--md-sys-color-surface-container': objectRGBAToRGBA(rgbaFromArgb(materialPalette.n1.tone(94))),
		'--md-sys-color-surface-container-high': objectRGBAToRGBA(
			rgbaFromArgb(materialPalette.n1.tone(92))
		),
		'--md-sys-color-surface-container-highest ': objectRGBAToRGBA(
			rgbaFromArgb(materialPalette.n1.tone(90))
		)
	} as MaterialCssVariablesOnDOM;
};

const objectRGBAToRGBA = ({ r, g, b }: { r: number; g: number; b: number }) => {
	return `${r} ${g} ${b}`;
};

export { lightSchemeProperties, darkSchemeProperties };
